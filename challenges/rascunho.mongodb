use("commerce");
db.produtos.find();

// 1 - Inclua o campo criadoPor em todos os documentos, colocando "Ronald McDonald" no valor desse campo.


use("commerce");
db.produtos.updateMany(
  {},
  {
    $push: { criadoPor: "Ronald McDonald" }
  }
);

// 2 - Inclua o campo valorUnitario em todos os documentos em que esse campo não existe e atribua a ele o valor "0.00", com o tipo NumberDecimal.

use("commerce");
db.produtos.updateMany(
  {},
  { $set:  { valorUnitario: NumberDecimal("0.00") } },
  { upsert: true },
);

use("commerce");
db.produtos.find(
  {},
  {
    nome: 1, 
    valorUnitario: 1, 
    _id: 0 },
  { upsert: true }
);

// 3 - Adicione o campo avaliacao em todos os documentos da coleção e efetue alterações nesse campo.

use("commerce");
db.produtos.updateMany(
  {},
  { $set: { avaliacao: NumberInt("0") } },
  { upsert: true },
);

use("commerce")
db.produtos.updateMany(
  { tags: "bovino" },
  { $inc: { avaliacao: 5 } },
)

use("commerce")
db.produtos.updateMany(
  { tags: "ave" },
  { $inc: { avaliacao: 3 } },
)

use("commerce");
db.produtos.find(
  {},
  {
    nome: 1, 
    avaliacao: 1, 
    _id: 0 },
);

// 4 - Atribua a data corrente ao campo ultimaModificacao no sanduíche Big Mac.

use("commerce");
db.produtos.updateMany(
  { title: "Big Mac"},
  { $currentDate: { ultimaModificacao: { $type: "date" } } },
);

use("commerce");
db.produtos.find(
  { ultimaModificacao: { $exists: true } },
  {
    nome: 1,  
    _id: 0 },
);

// 5 - Adicione ketchup aos ingredientes para todos os sanduíches menos o McChicken, garantindo que não haja duplicidade nos ingredientes.

use("commerce");
db.produtos.updateMany(
  { nome: { $ne: "McChicken" } },
  { $push: { ingredientes: "ketchup" } }
);


use("commerce");
db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    ingredientes: 1 
  },
);

// 6 - Inclua bacon no final da lista de ingredientes dos sanduíches Big Mac e Quarteirão com Queijo.

use("commerce");
db.produtos.updateMany(
  { nome: { $in: ["Big Mac", "Quarteirão com Queijo"] } },
  { $push: { ingredientes: "bacon" } }
);

use("commerce");
db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    ingredientes: 1 
  },
);

// 7 - Remova o item cebola de todos os sanduíches.

use("commerce");
db.produtos.updateMany(
  {},
  { $pull: { ingredientes: "cebola" } }
);

db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    ingredientes: 1 
  },
);

// 8 - Remova o primeiro ingrediente do sanduíche Quarteirão com Queijo.

use("commerce");
db.produtos.updateOne(
  { nome: "Quarteirão com Queijo" },
  { $pop: { ingredientes: -1 } }
);

db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    ingredientes: 1 
  },
);

// 9 - Remova o último ingrediente do sanduíche Cheddar McMelt.

db.produtos.updateOne(
  { nome: "Cheddar McMelt" },
  { $pop: { ingredientes: 1 } },
);

db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    ingredientes: 1, 
  },
);

// 10 - Adicione a quantidade de vendas dos sanduíches por dia da semana.

use("commerce");
db.produtos.updateMany(
  {},
  { $set: { vendasPorDia: [0, 0, 0, 0, 0, 0, 0] } }
);

use("commerce");
db.produtos.updateMany(
  {},
  { $set: { vendasPorDia: [0, 0, 0, 0, 0, 0, 0] } }
);

use("commerce");
db.produtos.updateMany(
  {},
  { $set: { vendasPorDia: [0, 0, 0, 0, 0, 0, 0] } }
);

use("commerce");
db.produtos.updateOne(
  {nome: "Big Mac"},
  { $inc: { "vendasPorDia.3": 60 } }
);


use("commerce");
db.produtos.updateOne(
  {tags: { $elemMatch: { $eq: "bovino", $eq: "pão" } } },
  { $inc: { "vendasPorDia.6": 120 } }
);

db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    vendasPorDia: 1 
  },
);

// 11 - Insira os elementos combo e tasty no array tags de todos os sanduíches e aproveite para deixar os elementos em ordem alfabética ascendente.

use("commerce");
db.produtos.updateMany(
  {},
  { $push: 
    { tags: { 
        $each: ["combo", "tasty"],
        $sort: 1,
    } } },
);

db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    tags: 1, 
  },
);

// 12 - Ordene em todos os documentos os elementos do array valoresNutricionais pelo campo percentual de forma descendente.


use("commerce");
db.produtos.updateMany(
  {},
  { $push: 
    { valoresNutricionais: { 
        $each: [],
        $sort: { percentual: -1 },
    } } },
);

db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    valoresNutricionais: 1, 
  },
);

// 13 - Adicione o elemento muito sódio ao final do array tags nos produtos em que o percentual de sódio seja maior ou igual a 40.

use("commerce");
db.produtos.updateMany(
  { valoresNutricionais: 
  { $elemMatch: { 
    tipo: "sódio", 
    percentual: { $gte: 40 } 
    } }  },
  { $push: { tags: "muito sódio" } }
);

use("commerce");
db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    tags: 1, 
  },
);

// 14 - Adicione o elemento contém sódio ao final do array tags nos produtos em que o percentual de sódio seja maior do que 20 e menor do que 40.

use("commerce");
db.produtos.updateMany(
  { valoresNutricionais: 
  { $elemMatch: { 
    tipo: "sódio", 
    percentual: { $gt: 20, $lt:40 } 
    } }  },
  { $push: { tags: "contém sódio" } }
);

use("commerce");
db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    tags: 1, 
  },
);

// 15 - Conte quantos produtos contêm Mc no nome, sem considerar letras maiúsculas ou minúsculas.

use("commerce");
db.produtos.count(
  { nome: { $regex: /mc/i } },
);

// 16 - Conte quantos produtos têm 4 ingredientes.

use("commerce");
db.produtos.count(
  { ingredientes: { $size: 4 } }
);

// 17 - Conte quantos documentos contêm as palavras frango ou hamburguer utilizando o operador $text.

db.produtos.createIndex(
  { descricao: "text" },
  { default_language: "pt" }
)


use("commerce");
db.produtos.count(
  { 
    $text: { $search: "frango hamburguer",
    $language: "pt"
  } },
)

// 18 - Conte quantos documentos contêm a expressão feito com utilizando o operador $text.

db.produtos.createIndex(
  { descricao: "text" },
  { default_language: "pt" }
)


use("commerce");
db.produtos.count(
  { 
    $text: { $search: "feito com",
    $language: "pt"
  } },
)

// 19 - Renomeie o campo descricao para descricaoSite em todos os documentos.

use("commerce");
db.produtos.updateMany(
  {},
  {
    $rename: { descricao: "descricaoSite" }
  }
)

use("commerce");
db.produtos.find(
  {},
  {
    nome: 1,  
    _id: 0,
    descricao: 1,
    descricaoSite: 1, 
  },
);
